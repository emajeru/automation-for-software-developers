---
- name: Add User
  hosts: all
  gather_facts: no
  become: true
  tasks:
    - name: Create User Login
      user:
        name: "{{ username }}"
        password: "{{ password | password_hash('sha512') }}"
        groups: sudo
        shell: /bin/bash
        state: present

    - name: Add the ssh key
      authorized_key: user={{ username }} 
                      key="{{ lookup('file','/Users/$USERNAME/.ssh/id_rsa.pub') }}"
                      state=present

    - name: Disable hostname reset on reboot
      replace:
        path: /etc/cloud/cloud.cfg
        regexp: "^preserve_hostname: false$"
        replace: "preserve_hostname: true"
      when: ansible_distribution == "Ubuntu"

    - name: Configure Hostname
      hostname: name={{ sys_name }}
      when: sys_name is defined

    - name: Configure consistent hostname on Ubuntu for {{ sys_name }}
      lineinfile:
        dest=/etc/hosts
        line='127.0.0.1\t{{ sys_name }}'
        insertafter="^127\.0\.0\.1.*localhost$"
        state=present
      when:
        - sys_name is defined
        - fq_sys_name is not defined

    - name: Configure consistent hostname on Ubuntu for {{ fq_sys_name }}
      lineinfile:
        dest=/etc/hosts
        line='127.0.0.1\t{{ fq_sys_name }}\t{{ sys_name }}'
        insertafter="^127\.0\.0\.1.*localhost$"
        state=present
      when:
        - sys_name is defined
        - fq_sys_name is defined
    
    - name: Reboot to confirm changes
      reboot:
        msg: "Rebooting server {{ sys_name }}" 
    
    - name: Back SSHD Config
      fetch:
        src: /etc/ssh/sshd_config
        dest: ../config_backups
      when: backup == True

    - name: Disable Password Authentication
      lineinfile:
        dest=/etc/ssh/sshd_config
        regexp='^PasswordAuthentication'
        line="PasswordAuthentication no"
        state=present
        backup=yes

    - name: Disable Root Login
      lineinfile:
        dest=/etc/ssh/sshd_config
        regexp='^PermitRootLogin'
        line="PermitRootLogin no"
        state=present
        backup=yes
      notify:
        - restart_ssh

  handlers:
    - name: restart_ssh
      service:
        name=sshd
        state=restarted
...